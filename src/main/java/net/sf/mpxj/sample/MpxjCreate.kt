/*
 * file:       MpxCreate.java
 * author:     Jon Iles
 * copyright:  (c) Packwood Software 2002-2003
 * date:       08/02/2003
 */

/*
 * This library is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by the
 * Free Software Foundation; either version 2.1 of the License, or (at your
 * option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
 */

package net.sf.mpxj.sample

import java.text.SimpleDateFormat

import net.sf.mpxj.CustomField
import net.sf.mpxj.CustomFieldContainer
import net.sf.mpxj.Duration
import net.sf.mpxj.ProjectCalendar
import net.sf.mpxj.ProjectFile
import net.sf.mpxj.ProjectProperties
import net.sf.mpxj.RelationType
import net.sf.mpxj.Resource
import net.sf.mpxj.ResourceAssignment
import net.sf.mpxj.Task
import net.sf.mpxj.TaskField
import net.sf.mpxj.TimeUnit
import net.sf.mpxj.common.NumberHelper
import net.sf.mpxj.writer.ProjectWriter
import net.sf.mpxj.writer.ProjectWriterUtility

/**
 * This example illustrates creation of an MPX or an MSPDI file from scratch.
 * The output type of the file generated by this class depends on the file
 * name extension supplied by the user. A .xml extension will generate an
 * MSPDI file, anything else will generate an MPX file.
 */
object MpxjCreate {
    /**
     * Main method.
     *
     * @param args array of command line arguments
     */
    fun main(args: Array<String>) {
        try {
            if (args.size != 1) {
                System.out.println("Usage: MpxCreate <output file name>")
            } else {
                create(args[0])
            }
        } catch (ex: Exception) {
            ex.printStackTrace(System.out)
        }

    }

    /**
     * This method creates a summary task, two sub-tasks and a milestone,
     * all with the appropriate constraints between them. The tasks are
     * assigned to two resources. Note that Microsoft Project is fussy
     * about the order in which things appear in the file. If you are going
     * to assign resources to tasks, the resources must appear in the
     * file before the tasks.
     *
     * @param filename output file name
     */
    @Throws(Exception::class)
    private fun create(filename: String) {
        //
        // Create a simple date format to allow us to
        // easily set date values.
        //
        val df = SimpleDateFormat("dd/MM/yyyy")

        //
        // Create a ProjectFile instance
        //
        val file = ProjectFile()

        //
        // Uncomment these lines to test the use of alternative
        // delimiters and separators for MPX file output.
        //
        //file.setDelimiter(';');
        //file.setDecimalSeparator(',');
        //file.setThousandsSeparator('.');

        //
        // Add a default calendar called "Standard"
        //
        val calendar = file.addDefaultBaseCalendar()

        //
        // Add a holiday to the calendar to demonstrate calendar exceptions
        //
        calendar.addCalendarException(df.parse("13/03/2006"), df.parse("13/03/2006"))

        //
        // Retrieve the project properties and set the start date. Note Microsoft
        // Project appears to reset all task dates relative to this date, so this
        // date must match the start date of the earliest task for you to see
        // the expected results. If this value is not set, it will default to
        // today's date.
        //
        val properties = file.projectProperties
        properties.startDate = df.parse("01/01/2003")

        //
        // Set a couple more properties just for fun
        //
        properties.projectTitle = "Created by MPXJ"
        properties.author = "Jon Iles"

        //
        // Let's create an alias for TEXT1
        //
        val customFields = file.customFields
        val field = customFields.getCustomField(TaskField.TEXT1)
        field.setAlias("My Custom Field")

        //
        // Add resources
        //
        val resource1 = file.addResource()
        resource1.name = "Resource1"

        val resource2 = file.addResource()
        resource2.name = "Resource2"

        //
        // This next line is not required, it is here simply to test the
        // output file format when alternative separators and delimiters
        // are used.
        //
        resource2.maxUnits = Double.valueOf(50.0)

        //
        // Create a summary task
        //
        val task1 = file.addTask()
        task1.name = "Summary Task"

        //
        // Create the first sub task
        //
        val task2 = task1.addTask()
        task2.name = "First Sub Task"
        task2.duration = Duration.getInstance(10.5, TimeUnit.DAYS)
        task2.start = df.parse("01/01/2003")
        task2.setText(1, "My Custom Value 1")

        //
        // We'll set this task up as being 50% complete. If we have no resource
        // assignments for this task, this is enough information for MS Project.
        // If we do have resource assignments, the assignment record needs to
        // contain the corresponding work and actual work fields set to the
        // correct values in order for MS project to mark the task as complete
        // or partially complete.
        //
        task2.percentageComplete = NumberHelper.getDouble(50.0)
        task2.actualStart = df.parse("01/01/2003")

        //
        // Create the second sub task
        //
        val task3 = task1.addTask()
        task3.name = "Second Sub Task"
        task3.start = df.parse("11/01/2003")
        task3.duration = Duration.getInstance(10, TimeUnit.DAYS)
        task3.setText(1, "My Custom Value 2")

        //
        // Link these two tasks
        //
        task3.addPredecessor(task2, RelationType.FINISH_START, null)

        //
        // Add a milestone
        //
        val milestone1 = task1.addTask()
        milestone1.name = "Milestone"
        milestone1.start = df.parse("21/01/2003")
        milestone1.duration = Duration.getInstance(0, TimeUnit.DAYS)
        milestone1.addPredecessor(task3, RelationType.FINISH_START, null)

        //
        // This final task has a percent complete value, but no
        // resource assignments. This is an interesting case it it requires
        // special processing to generate the MSPDI file correctly.
        //
        val task4 = file.addTask()
        task4.name = "Next Task"
        task4.duration = Duration.getInstance(8, TimeUnit.DAYS)
        task4.start = df.parse("01/01/2003")
        task4.percentageComplete = NumberHelper.getDouble(70.0)
        task4.actualStart = df.parse("01/01/2003")

        //
        // Assign resources to tasks
        //
        val assignment1 = task2.addResourceAssignment(resource1)
        val assignment2 = task3.addResourceAssignment(resource2)

        //
        // As the first task is partially complete, and we are adding
        // a resource assignment, we must set the work and actual work
        // fields in the assignment to appropriate values, or MS Project
        // won't recognise the task as being complete or partially complete
        //
        assignment1.work = Duration.getInstance(80, TimeUnit.HOURS)
        assignment1.actualWork = Duration.getInstance(40, TimeUnit.HOURS)

        //
        // If we were just generating an MPX file, we would already have enough
        // attributes set to create the file correctly. If we want to generate
        // an MSPDI file, we must also set the assignment start dates and
        // the remaining work attribute. The assignment start dates will normally
        // be the same as the task start dates.
        //
        assignment1.remainingWork = Duration.getInstance(40, TimeUnit.HOURS)
        assignment2.remainingWork = Duration.getInstance(80, TimeUnit.HOURS)
        assignment1.start = df.parse("01/01/2003")
        assignment2.start = df.parse("11/01/2003")

        //
        // Write a 100% complete task
        //
        val task5 = file.addTask()
        task5.name = "Last Task"
        task5.duration = Duration.getInstance(3, TimeUnit.DAYS)
        task5.start = df.parse("01/01/2003")
        task5.percentageComplete = NumberHelper.getDouble(100.0)
        task5.actualStart = df.parse("01/01/2003")

        //
        // Write a 100% complete milestone
        //
        val task6 = file.addTask()
        task6.name = "Last Milestone"
        task6.duration = Duration.getInstance(0, TimeUnit.DAYS)
        task6.start = df.parse("01/01/2003")
        task6.percentageComplete = NumberHelper.getDouble(100.0)
        task6.actualStart = df.parse("01/01/2003")

        //
        // Write the file
        //
        val writer = ProjectWriterUtility.getProjectWriter(filename)
        writer.write(file, filename)
    }
}
