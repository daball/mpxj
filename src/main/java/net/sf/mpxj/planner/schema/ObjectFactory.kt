//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2010.08.02 at 09:18:52 PM BST
//

package net.sf.mpxj.planner.schema

import javax.xml.bind.annotation.XmlRegistry

/**
 * This object contains factory methods for each
 * Java content interface and Java element interface
 * generated in the net.sf.mpxj.planner.schema package.
 *
 * An ObjectFactory allows you to programatically
 * construct new instances of the Java representation
 * for XML content. The Java representation of XML
 * content can consist of schema derived interfaces
 * and classes representing the binding of schema
 * type definitions, element declarations and model
 * groups.  Factory methods for each of these are
 * provided in this class.
 *
 */
/**
 * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: net.sf.mpxj.planner.schema
 *
 */
@SuppressWarnings("all")
@XmlRegistry
class ObjectFactory {

    /**
     * Create an instance of [Allocation]
     *
     */
    fun createAllocation(): Allocation {
        return Allocation()
    }

    /**
     * Create an instance of [Interval]
     *
     */
    fun createInterval(): Interval {
        return Interval()
    }

    /**
     * Create an instance of [Predecessors]
     *
     */
    fun createPredecessors(): Predecessors {
        return Predecessors()
    }

    /**
     * Create an instance of [Predecessor]
     *
     */
    fun createPredecessor(): Predecessor {
        return Predecessor()
    }

    /**
     * Create an instance of [Group]
     *
     */
    fun createGroup(): Group {
        return Group()
    }

    /**
     * Create an instance of [Days]
     *
     */
    fun createDays(): Days {
        return Days()
    }

    /**
     * Create an instance of [Task]
     *
     */
    fun createTask(): Task {
        return Task()
    }

    /**
     * Create an instance of [DayType]
     *
     */
    fun createDayType(): DayType {
        return DayType()
    }

    /**
     * Create an instance of [OverriddenDayTypes]
     *
     */
    fun createOverriddenDayTypes(): OverriddenDayTypes {
        return OverriddenDayTypes()
    }

    /**
     * Create an instance of [Property]
     *
     */
    fun createProperty(): Property {
        return Property()
    }

    /**
     * Create an instance of [DayTypes]
     *
     */
    fun createDayTypes(): DayTypes {
        return DayTypes()
    }

    /**
     * Create an instance of [Project]
     *
     */
    fun createProject(): Project {
        return Project()
    }

    /**
     * Create an instance of [Properties]
     *
     */
    fun createProperties(): Properties {
        return Properties()
    }

    /**
     * Create an instance of [Calendar]
     *
     */
    fun createCalendar(): Calendar {
        return Calendar()
    }

    /**
     * Create an instance of [Allocations]
     *
     */
    fun createAllocations(): Allocations {
        return Allocations()
    }

    /**
     * Create an instance of [ResourceGroups]
     *
     */
    fun createResourceGroups(): ResourceGroups {
        return ResourceGroups()
    }

    /**
     * Create an instance of [ListItem]
     *
     */
    fun createListItem(): ListItem {
        return ListItem()
    }

    /**
     * Create an instance of [Calendars]
     *
     */
    fun createCalendars(): Calendars {
        return Calendars()
    }

    /**
     * Create an instance of [Constraint]
     *
     */
    fun createConstraint(): Constraint {
        return Constraint()
    }

    /**
     * Create an instance of [DefaultWeek]
     *
     */
    fun createDefaultWeek(): DefaultWeek {
        return DefaultWeek()
    }

    /**
     * Create an instance of [Tasks]
     *
     */
    fun createTasks(): Tasks {
        return Tasks()
    }

    /**
     * Create an instance of [Phases]
     *
     */
    fun createPhases(): Phases {
        return Phases()
    }

    /**
     * Create an instance of [Day]
     *
     */
    fun createDay(): Day {
        return Day()
    }

    /**
     * Create an instance of [Resource]
     *
     */
    fun createResource(): Resource {
        return Resource()
    }

    /**
     * Create an instance of [OverriddenDayType]
     *
     */
    fun createOverriddenDayType(): OverriddenDayType {
        return OverriddenDayType()
    }

    /**
     * Create an instance of [Phase]
     *
     */
    fun createPhase(): Phase {
        return Phase()
    }

    /**
     * Create an instance of [Resources]
     *
     */
    fun createResources(): Resources {
        return Resources()
    }

}
